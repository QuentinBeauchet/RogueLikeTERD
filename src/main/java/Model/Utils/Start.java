package Model.Utils;import Model.Entitys.Monsters.AbstractMonster;import Model.Entitys.Player.BasicPlayer;import Model.Map.Etage;import Model.Map.Map;import java.io.*;import java.time.LocalDateTime;import java.time.format.DateTimeFormatter;import java.util.ArrayList;import java.util.Arrays;import java.util.Objects;import java.util.Random;public class Start {    private static TourManager tourManager;    public static void StartGame(){        Start.setConsoleMode(false);        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));        tourManager = getInfo(reader);        tourManager.schedule();        while (true) {            tourManager.playTour(reader);        }    }    private static TourManager getInfo(BufferedReader reader){        Affichage.start();        try{            switch (reader.readLine()) {                case "1" -> {                    return init(reader);                }                case "2" -> {                    return load(reader);                }                case "3" -> System.exit(0);            }        } catch (IOException e) {            Start.setConsoleMode(false);            e.printStackTrace();        }        return getInfo(reader);    }    private static TourManager init(BufferedReader reader){        System.out.print(Affichage.BLUE+"JOUEUR: "+Affichage.RESET);        String nom = "";        try {            nom = reader.readLine();        } catch (IOException e) {            Start.setConsoleMode(false);            e.printStackTrace();        }        BasicPlayer player = new BasicPlayer(20,nom.length()==0 ? "Tu" : nom,100,1);        System.out.print(Affichage.BRIGTH_PURPLE+"Numero seed: "+Affichage.RESET);        long seed_value;        try{            String value = "";            try {                value = reader.readLine();            } catch (IOException e) {                Start.setConsoleMode(false);                e.printStackTrace();            }            seed_value = Long.parseLong(value);        } catch (NumberFormatException e){            seed_value = new Random().nextLong();        }        Procedure.setSeed(seed_value);        return new TourManager(player);    }    private static TourManager load(BufferedReader reader){        File folder = new File("Saves");        if(!folder.exists() || Objects.requireNonNull(folder.listFiles()).length==0){            System.out.println(Affichage.RED+"Il n'y a aucune sauvegarde."+Affichage.RESET);            return init(reader);        }        System.out.println(Affichage.BLUE+"Veuillez choisir une sauvegarde:"+Affichage.RESET);        ArrayList<File> listFiles = new ArrayList<>(Arrays.asList(Objects.requireNonNull(folder.listFiles())));        System.out.print(Affichage.BRIGTH_BLUE);        for (int i = 0; i < listFiles.size(); i++) {            System.out.println(i+". "+listFiles.get(i).getName());        }        int index = 0;        try {            index = Integer.parseInt(reader.readLine());        } catch (IOException e) {            Start.setConsoleMode(false);            e.printStackTrace();        } catch (NumberFormatException e){            System.out.println(Affichage.RED+"Nom de sauvegarde invalide."+Affichage.RESET);            end();        }        TourManager tm = null;        try{            ObjectInputStream in = new ObjectInputStream(new FileInputStream(listFiles.get(index).getAbsolutePath()));            tm = (TourManager) in.readObject();            for(Etage e : tm.getMap().getEtages()){                for(AbstractMonster m : e.getMonsters()){                    TourManager.addMonsterSchedule(m);                }            }        } catch (IOException | ClassNotFoundException e) {            Start.setConsoleMode(false);            e.printStackTrace();        }        return tm;    }    public static BasicPlayer getPlayer(){        return tourManager == null ? null : tourManager.getPlayer();    }    public static Map getMap() {        return tourManager == null ? null : tourManager.getMap();    }    public static void setConsoleMode(boolean raw){        try{            //TODO faire l'equivalent sur windows si existe            if(System.getProperty("os.name").equals("Linux")){                Runtime.getRuntime().exec(new String[]{"/bin/sh", "-c", (raw ? "stty raw </dev/tty" : "stty cooked </dev/tty")}).waitFor();            }        }        catch (Exception e){            Start.setConsoleMode(false);            e.printStackTrace();        }    }    public static void sauvegarde(){        try{            DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy:MM:dd HH:mm:ss");            new File("Saves/").mkdir();            ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream("Saves/"+ Objects.requireNonNull(Start.getPlayer()).getNom()+"-"+dtf.format(LocalDateTime.now())));            out.writeObject(tourManager);            System.out.println(Affichage.RED+"Le jeu a été sauvegardé avec succés."+Affichage.RESET);            end();        } catch (IOException e) {            Start.setConsoleMode(false);            e.printStackTrace();        }    }    public static void end(){        Start.setConsoleMode(false);        System.exit(1);    }}