import Model.*;import Model.Map.Etage;import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.util.ArrayList;public class Main {    public static final int MapWidth = 40;    public static final int MapHeigth = 40;    public static void main(String[] args) throws IOException {        Etage myEtage = new Etage(MapWidth,MapHeigth);        //Model.Procedure.setRamdomRooms(myEtage);        //myEtage.addEntity(new BasicPlayer(new Position(11, 16), myEtage));        //myEtage.upgradeCellsWithEntitys();        //System.out.println(myEtage.cheminFind(myEtage.getRooms().get(0).getDoors().get(0),myEtage.getRooms().get(1).getDoors().get(0)));        //myEtage.setPath();        Procedure.setRandomRooms(myEtage);        System.out.println(myEtage);        myEtage.RoomFusion();        Procedure.setRandomChest(myEtage,3);        Procedure.setRandomMob(myEtage);        System.out.println(myEtage);        //Affichage.Rooms(myEtage);        //myEtage.ObstaclesAleatoires(300);        Position pos1=Procedure.getAccesibleRandomPosition(myEtage);        Position pos2=Procedure.getAccesibleRandomPosition(myEtage);        long t1 = System.currentTimeMillis();        ArrayList<Position> astar = myEtage.Astar(pos1,pos2);        System.out.println(System.currentTimeMillis()-t1 +" ms");        Affichage.Path(myEtage,astar);        //Affichage.Rooms_Color(myEtage);        BasicPlayer player = new BasicPlayer(myEtage,Procedure.getAccesibleRandomPosition(myEtage));        myEtage.addEntity(player);        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));        boolean Game = true;        while(Game){            System.out.print(Affichage.CLEAR);            System.out.println(myEtage);            System.out.println("\n\n\n\n\n\n\n\n\n\n");            System.out.print(Affichage.RESET+"Enter your key: ");            switch (reader.readLine()){                case "z" :                    player.moveUp();                    break;                case "q" :                    player.moveLeft();                    break;                case "s" :                    player.moveDown();                    break;                case "d" :                    player.moveRight();                    break;                case "exit" :                    System.exit(0);                default:                    System.out.println("Wrong key");            }        }    }}